
type storage_info = {
  id : string option;
  path : string;
  (**  The path embeds the kind of storage, e.g., mem://alpha/beta/gamma, 
       or mysql://alpha/beta/gamma, etc.*)
}


type access_info = {
  id : string option;
  path : string; 
  (** The path, without specifying the backend, e.g./ //alpha/beta *)
  cache_size : int;
}

type tuple = {
  key : string;
  value : string;
}

type notification = {
  sid : int;
  elems : tuple list;
}

type storage_control = [
  | Create of storage_info
  | Close of string 
  | Dispose of string 
]

type access_control = [
  | Create of access_info
  | Close of string 
  | Dispose of string 
]

type access_operation = [
  | Put of tuple 
  | Get of string   
  | DPut of tuple
  | Remove of string
  | Sub of string 
  | Unsub of string   
]
type access_operator = {
  id : string;
  op : access_operation;
}

type request = [
  | SCtrl of storage_control
  | ACtrl of access_control
  | AOp of access_operation  
]

type reply = [
  | Ok   
  | Error of int 
  | Values of tuple list
  | Notice of notification  
  | SubId of int
]

type message = { 
  mid : int; 
  msg : [Request of request | Reply of reply];
}  
